plugins {
    id "com.diffplug.spotless" version "6.11.0"
    id 'io.github.gradle-nexus.publish-plugin' version '2.0.0'
}

project.version="0.0.1-SNAPSHOT"

repositories {
    mavenLocal()
    mavenCentral()

    maven {
        content {
            includeGroup "io.btrace"
        }
        mavenContent {
            snapshotsOnly()
        }
        // see https://central.sonatype.org/publish/publish-portal-snapshots/#consuming-via-gradle
        url 'https://central.sonatype.com/repository/maven-snapshots/'
    }
}

spotless {
    // Format Java in all modules
    java {
        target '**/src/**/*.java'
        googleJavaFormat('1.17.0')
        trimTrailingWhitespace()
        endWithNewline()
    }
    // Format Groovy plugin sources
    groovy {
        target 'jafar-gradle-plugin/src/**/*.groovy'
        greclipse()
        trimTrailingWhitespace()
        endWithNewline()
    }
    // Format Gradle build scripts
    format 'gradle', {
        target '*.gradle', '**/*.gradle'
        indentWithSpaces(4)
        trimTrailingWhitespace()
        endWithNewline()
    }
}

    nexusPublishing {
    repositories {
        sonatype {
          // see https://central.sonatype.org/publish/publish-portal-ossrh-staging-api/#configuration
          // see https://github.com/gradle-nexus/publish-plugin#publishing-to-maven-central-via-sonatype-central
          // Also for official doc
          // staging repo publishing https://central.sonatype.org/publish/publish-portal-ossrh-staging-api/#configuration
          // snapshot publishing https://central.sonatype.org/publish/publish-portal-snapshots/#publishing-via-other-methods
          nexusUrl.set(uri("https://ossrh-staging-api.central.sonatype.com/service/local/"))
          snapshotRepositoryUrl.set(uri("https://central.sonatype.com/repository/maven-snapshots/"))

            username = project.hasProperty("sonatype.user") ? project.property("sonatype.user") : System.getenv("SONATYPE_USERNAME")
            password = project.hasProperty("sonatype.password") ? project.property("sonatype.password") : System.getenv("SONATYPE_PASSWORD")
        }
    }
}

// Ensure formatting is checked during all builds
allprojects {
    tasks.matching { it.name == 'check' }.configureEach {
        dependsOn rootProject.tasks.named('spotlessCheck')
    }
}

// Also enforce formatting when running tests directly
allprojects {
    tasks.withType(Test).configureEach {
        dependsOn rootProject.tasks.named('spotlessCheck')
    }
}
